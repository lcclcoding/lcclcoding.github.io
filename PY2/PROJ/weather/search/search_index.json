{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#mini-project-weather","title":"Mini-Project: Weather","text":"<p>Good job completing the topic on dictionary! You're now ready to apply what you've learned to build real-world applications using API. In this mini-project, you will see how we can interface with other external services via the use of APIs to build powerful and versatile applications.</p>"},{"location":"exercise/","title":"Exercise","text":""},{"location":"exercise/#api","title":"API","text":""},{"location":"exercise/#background","title":"Background","text":""},{"location":"exercise/#application-programming-interface","title":"Application Programming Interface","text":"<p>Before be begin, let us understand what is an API. An Application Programming Interface (API), is a set of rules and protocols that allows different software systems to communicate with each other.  There are hundreds of API running the whole internet, but the one we will be interested in today is a standard know as JavaScript Object Notation or JSON for short.</p>"},{"location":"exercise/#json","title":"JSON","text":"<p>JSON is a lightweight, text-based data interchange format that is both human-readable and easily parsed by machines.\u00a0It is based on a subset of the JavaScript programming language but is language-independent and widely used for transmitting data in web applications and other contexts.</p> <p>A example of a JSON format is shown</p> <pre><code>{\n \"name\":\"John\", \n \"age\":30,\n \"gender\": \"M\", \n}\n</code></pre> <p>Looks familiar? It almost like an Python dictionary. However, it is important to note that the JSON format itself is just a text string. It usefulness come when it is turned into a Python dictionary as you will see later on.</p> <p>The JSON format supports the following datatypes:</p> <ul> <li>strings (str)</li> <li>numbers (float/int)</li> <li>list</li> <li>booleans</li> <li>null (none)</li> </ul>"},{"location":"exercise/#exercise","title":"Exercise","text":""},{"location":"exercise/#task-0-setup","title":"Task 0: Setup","text":"<p>In order to easily make use of JSON based API, you will first need to install the <code>request</code> package. This module will allow you to easily make web requests.</p> <p>Enter the following command into your terminal:</p> <pre><code>pip install requests\n</code></pre>"},{"location":"exercise/#task-1-exploring-apis","title":"Task 1: Exploring APIs","text":"<p>In order to use API, we first need to find a website or service that provide it. For illustrations we will be using the <code>isEven</code> API from https://isevenapi.xyz! But first we need to understand how to use the API.</p> <p>Searching for the docs on the website we get the following: </p> <p>From the image we see that sending a HTTP GET Request to <code>https://api.isevenapi.xyz/api/iseven/6/</code> will give us an JSON response as follows:</p> <pre><code>{\"ad\":\"Buy isEvenCoin, the hottest new cryptocurrency!\",\"iseven\":true}\n</code></pre> <p>Try it out with your browser at: https://api.isevenapi.xyz/api/iseven/6/</p>"},{"location":"exercise/#task-2-fetching-api-content-in-python","title":"Task 2: Fetching API content in Python","text":"<p>Using the <code>request</code> module we installed earlier on, we can fetch the JSON text as follow:</p> <pre><code>import requests\n\nresponse = requests.get('https://api.isevenapi.xyz/api/iseven/6/')\n\nif response.status_code == 200:\n print(response.text)\n print(type(response.text))\nelse:\n print(\"Failed to get API\")\n</code></pre> <p>If the API was successful you should get an output similar to this:</p> <pre><code>{\"ad\":\"Buy isEvenCoin, the hottest new cryptocurrency!\",\"iseven\":true}\n\n&lt;class 'str'&gt;\n</code></pre> <p>But rather than using the raw output of the JSON text, we often like to convert it into a dictionary to make it easier to work with. Luckily, the request module allow use to perform this easily using <code>.json()</code> method.</p> <pre><code>...\nif response.status_code == 200:\n data = response.json()\n print(f\"AD: {data['ad']}\") \n print(f\"IsEven: {data['iseven']}\") \n...\n</code></pre>"},{"location":"exercise/#task-3-modify","title":"Task 3: Modify","text":"<p>Modify the above snippet of code to allow users input to check if their number is even or odd. Experiment and explore what would happens if invalid input is placed into the API. Print the HTTP status and error message (if available) from the API to the user!</p> <p>Hint:</p> <ul> <li>Explore what the different type of HTTP status code mean (e.g. <code>200</code>, <code>400</code>, <code>401</code>, <code>404</code>,<code>500</code>)</li> </ul>"},{"location":"project/","title":"Project","text":""},{"location":"project/#project","title":"Project","text":""},{"location":"project/#backstory-brief","title":"Backstory / Brief","text":"<p>TINK\u2014KRSHHH! The weather wizard stared in disbelief as the enchanted sphere slipped from his grasp and shattered on the stone floor, scattering into a thousand glittering shards. In that instant, the renowned wizard tower - famed for its reliable and precise weather forecasts - lost its magical ability to predict the skies.</p> <p>Thousands of locals, who depended on these daily forecasts, suddenly found themselves at the mercy of unpredictable weather. Frantic, the wizard searched day and night for an alternative while the sphere was being repaired. By chance, he stumbled upon an API service on the web that offered similar information! Unfortunately, the API delivered data in JSON format. While useful for machines, but it hardly user-friendly for the average villager.</p> <p>You have been hired by the local wizard tower to build a command-line interface (CLI) application that delivers the latest weather updates to the community in a clear and accessible way.</p>"},{"location":"project/#tasks","title":"Tasks","text":""},{"location":"project/#task-0-accept","title":"Task 0: Accept","text":"<p>Accept the assignment from GitHub classroom</p>"},{"location":"project/#task-1-understanding-the-api","title":"Task 1: Understanding the API","text":"<p>The API that we will be using will from the Singapore Government, NEA (National Environment Agency) providing 24 Hour weather forecast. The documentation for the API is available at this api docs link with actual the API address at https://api-open.data.gov.sg/v2/real-time/api/twenty-four-hr-forecast</p> <p>Information provided by the API includes the forecast date, when it was last updated, the expected high and low temperatures, humidity, wind speed and direction, and a short summary of the weather. The day is split into different time periods, like morning, afternoon, and night, and for each period, it shows what the weather will be like in different parts of the area (west, east, central, south, and north).</p>"},{"location":"project/#task-2-fetching-the-api","title":"Task 2: Fetching The API","text":"<p>Complete the <code>update_data()</code> function to retrieve the latest weather data from the API. Cache the data into a global <code>_data</code> variable</p>"},{"location":"project/#task-3-get_data-method","title":"Task 3: <code>get_data()</code> Method","text":"<p>We will use a helper method to access the data. In this <code>get_data()</code> method, add a check to see if the data is old. If the data is older than 3 mins, call the <code>update_data()</code>.</p> <p>Note: We are doing something known as caching in Task 2 &amp; Task 3 as most APIs will have a rate limit to prevent abuse. So rather than calling the API every time a function is called, cached the data and return the cached result and only occasionally update the data.</p>"},{"location":"project/#task-4-extracting-information","title":"Task 4: Extracting Information","text":"<p>Complete the <code>get_*()</code> functions to extract specific data from the JSON response</p> <ul> <li><code>get_temperature()</code> \u2192 Returns a dictionary with <code>low</code>, <code>high</code>, and <code>unit</code></li> <li><code>get_humidity()</code> \u2192 Returns a dictionary with <code>low</code>, <code>high</code>, and <code>unit</code></li> <li><code>get_forecast()</code> \u2192 Returns a dictionary with <code>code</code> and <code>text</code></li> <li><code>get_wind()</code> \u2192 Returns a dictionary with <code>speed</code> (low/high) and <code>direction</code></li> <li><code>get_valid_period()</code> \u2192 Returns the period the forecast is valid for</li> </ul> <p>Each function should calls the <code>get_general('field')</code> helper.</p>"},{"location":"project/#task-5-reformatting-information","title":"Task 5: Reformatting Information","text":"<p>In the raw API response contains the forecast for multiple regions, but it\u2019s not organized per region. Instead, it's grouped by time period, and within each period, it gives the forecast for all regions. This format is not directly useful to our use case and so we want to process it and return the data in a different way.</p> <p>Extract the regional weather forecasts from the API response with a function that:</p> <ul> <li>Take in a <code>region</code> (e.g., <code>'north'</code>, <code>'south'</code>, <code>'east'</code>, <code>'west'</code>, or <code>'central'</code>)</li> <li>Return a list of tuples that contains:</li> <li><code>timePeriod</code> dictionaries</li> <li><code>forecast</code> dictionaries</li> </ul>"},{"location":"project/#task-6-main","title":"Task 6: Main","text":"<p>Complete the <code>weather.py</code> and provide a way for users to get their forecast for their region.</p> <p>Sample output:</p> <pre><code>General Forecast:\nDate Range: 12 PM 26 May to 12 PM 27 May\nTemperature: 26\u00b0C - 36\u00b0C\nHumidity: 50% - 90%\nWind: 5-15 km/h NNW\nForecast: Fair &amp; Warm\n\nWould you like to view the regional forecast? (yes/no): yes\nEnter region (north/south/east/west/central): east\n\nRegional Forecast (east):\n- Midday to 6 pm 26 May: Fair &amp; Warm\n- 6 pm 26 May to 6 am 27 May: Fair (Night)\n- 6 am to Midday 27 May: Fair (Day)\n\nContinue? (yes/no): no\n</code></pre>"}]}